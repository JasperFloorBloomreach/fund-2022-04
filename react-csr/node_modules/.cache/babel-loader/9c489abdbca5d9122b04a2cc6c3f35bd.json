{"ast":null,"code":"var _jsxFileName = \"/home/jfloor/tmp/fund-2022-04-04/fundamentals-archetype/react-csr/src/components/FAQComments.tsx\";\n\n/*\n * Copyright 2020 Bloomreach (http://www.bloomreach.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Avatar, Divider, List, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core';\nexport function FAQComments(props) {\n  const url = props.page.getUrl();\n  const lastSlash = url.lastIndexOf(\"-\");\n  const lastDot = url.lastIndexOf(\".\");\n  const id = url.substring(lastSlash + 1, lastDot);\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const classes = makeStyles(theme => ({\n    root: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper\n    },\n    inline: {\n      display: 'inline'\n    }\n  }))();\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/comments?postId=\" + id).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, [id]);\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 12\n      }\n    }, \"Error: \", error.message);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  } else {\n    return /*#__PURE__*/React.createElement(List, {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, items.map(item => /*#__PURE__*/React.createElement(React.Fragment, {\n      key: item.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ListItem, {\n      alignItems: \"flex-start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      alt: item.name.toUpperCase(),\n      src: \"/static/images/avatar/1.jpg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      primary: item.email,\n      secondary: item.body,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Divider, {\n      variant: \"inset\",\n      component: \"li\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }))));\n  }\n}","map":{"version":3,"sources":["/home/jfloor/tmp/fund-2022-04-04/fundamentals-archetype/react-csr/src/components/FAQComments.tsx"],"names":["React","useEffect","useState","makeStyles","Avatar","Divider","List","ListItem","ListItemAvatar","ListItemText","FAQComments","props","url","page","getUrl","lastSlash","lastIndexOf","lastDot","id","substring","error","setError","isLoaded","setIsLoaded","items","setItems","classes","theme","root","width","backgroundColor","palette","background","paper","inline","display","fetch","then","res","json","result","message","map","item","name","toUpperCase","email","body"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Bloomreach (http://www.bloomreach.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {useEffect, useState} from 'react';\nimport {BrProps} from '@bloomreach/react-sdk';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Avatar, Divider, List, ListItem, ListItemAvatar, ListItemText} from '@material-ui/core';\n\nexport function FAQComments(props: BrProps) {\n\n  const url = props.page.getUrl()!;\n  const lastSlash = url.lastIndexOf(\"-\");\n  const lastDot = url.lastIndexOf(\".\");\n  const id = url.substring(lastSlash!+1, lastDot);\n\n  const [error, setError] = useState<any>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState<any>([]);\n\n  const classes = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n    },\n    inline: {\n      display: 'inline',\n    },\n  }))();\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/comments?postId=\"+id)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setItems(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [id])\n\n  if (error) {\n    return <div>Error: {error!.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <List className={classes.root}>\n        {items.map((item:any) => (\n          <React.Fragment key={item.name}>\n            <ListItem alignItems=\"flex-start\">\n              <ListItemAvatar>\n                <Avatar alt={item.name.toUpperCase()} src=\"/static/images/avatar/1.jpg\" />\n              </ListItemAvatar>\n              <ListItemText\n                primary={item.email}\n                secondary={item.body}\n              />\n            </ListItem>\n            <Divider variant=\"inset\" component=\"li\" />\n          </React.Fragment>\n        ))}\n      </List>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}